#include <LiquidCrystal_I2C.h>
#include <DHT.h>

DHT dht(22, DHT22);                                  // Inicializace DHT22
LiquidCrystal_I2C lcd(0x3F, 20, 4);                  // Inicializace I2C LCD displaye s adresou "0x3F" 

const byte upButtonPin = 11;                         // A-pin posuvneho enkoderu
const byte downButtonPin = 12;                       // B-pin posuvneho enkoderu
const byte rightButtonPin = 52;                      // tlacitko pro posun vpravo ve volbach menu
const byte leftButtonPin = 7;                        // tlacitko pro posun vlevo ve volbach menu

const byte ledPinGreen = 33;                         // indikace zapnuti precerpavaciho cerpadla (nadrz u domu -> nadrz u skleniku) 
const byte ledPinOrange = 43;                        // indikace zapnuti zalevaciho cerpadla (nadrz u skleniku -> sklenik)

int hladinaDum = 2000;                               // vyska hladiny v nadrzi u domu
int hladinaSklenik = 1520;                           // vyska hladiny v nadrzi u skleniku
boolean dumON = false;                               // logicky stav precerpavaciho cerpadla
boolean sklenikON = false;                           // logicky stav zalevaciho cerpadla

float dhtTemp;                                       // teplota z DHT22
float dhtHum;                                        // vlhkost z DHT22
float dsTemp = 15.2;                                 // teplota z DS18B20
float dsHum = 94.3;                                  // vlhkost z DS18B20


String MenuPolozky[] = {                             // pole nazvu polozek menu (jednotlivych stran)
  "Nadrz u domu",
  "Nadrz u skleniku",
  "Teplota",
  "Vlhkost" 
  "Zmena casu zaliti"
  "Zmena delky zaliti"
 };

void Zalej()
{
   int start = millis();
   digitalWrite(ledPinOrange, HIGH);
   if(millis >= (start + dobaZalevani * 60000))
   {
     digitalWrite(ledPinOrange, LOW); 
   }
}

void Cerpej()
{
   int start = millis();
   digitalWrite(ledPinGreen, HIGH);
   if(millis >= (start + dobaZalevani * 60000))
   {
     digitalWrite(ledPinGreen, LOW); 
   }
}


void menuFunctions(int menu, byte right, byte left)  // Zde se definuje, co se ma stat pri volbe dane polozky Menu
{
  switch(menu)                                      
  {
    case 1:                                          // nadrz u domu
    
      lcd.setCursor(0, 2);
      lcd.print("Zbyva     ");
      lcd.setCursor(12, 2);
      lcd.print(hladinaDum);
      lcd.setCursor(17, 2);
      lcd.print("l");
      lcd.setCursor(0, 3);
      lcd.print("Cerpadlo:");
      lcd.setCursor(10, 3);
      lcd.print("Off");
      lcd.setCursor(16, 3);
      lcd.print("On");

      if(right == 1)
      {
        dumON = true;
        digitalWrite(ledPinGreen, HIGH);
        lcd.setCursor(13, 3);
        lcd.print("  ");
        lcd.setCursor(18, 3);
        lcd.print("<<");
      }
      
      if(left == 1)
      {
        dumON = false;
        digitalWrite(ledPinGreen, LOW);
        lcd.setCursor(13, 3);
        lcd.print("<<");
        lcd.setCursor(18, 3);
        lcd.print("  ");
      }
     
      break;
     
     
    case 2:                                          //nadrz u skleniku
  
      lcd.setCursor(0, 2);
      lcd.print("Zbyva:     ");
      lcd.setCursor(12, 2);
      lcd.print(hladinaSklenik);
      lcd.setCursor(17, 2);
      lcd.print("l");
      lcd.setCursor(0, 3);
      lcd.print("Cerpadlo:");
      lcd.setCursor(10, 3);
      lcd.print("Off");
      lcd.setCursor(16, 3);
      lcd.print("On");

      if(right == 1)
      {
        sklenikON = true;
        lcd.setCursor(13, 3);
        lcd.print("  ");
        lcd.setCursor(18, 3);
        lcd.print("<<");
        digitalWrite(ledPinOrange, HIGH);
        lcd.setCursor(13, 3);
        lcd.print("  ");
        lcd.setCursor(18, 3);
        lcd.print("<<");
      }
      
      if(left == 1)
      {
        sklenikON = false;
        digitalWrite(ledPinOrange, LOW);
        lcd.setCursor(13, 3);
        lcd.print("<<");
        lcd.setCursor(18, 3);
        lcd.print("  ");
      }

      break;
    
    
    case 3:                                          // teplota
                                
      lcd.setCursor(0,2);
      lcd.print("Vzduch:");
      lcd.setCursor(10,2);
      lcd.print(dhtTemp);
      lcd.setCursor(16,2);
      lcd.print((char)223);
      lcd.setCursor(17,2);
      lcd.print("C");
      
      lcd.setCursor(0,3);
      lcd.print("Puda:");
      lcd.setCursor(10,3);
      lcd.print(dsTemp);
      lcd.setCursor(16,3);
      lcd.print((char)223);
      lcd.setCursor(17,3);
      lcd.print("C");
      
      break;

    case 4:                                          // vlhkost
      
      lcd.setCursor(0,2);
      lcd.print("Vzduch:");
      lcd.setCursor(10,2);
      lcd.print(dhtHum);
      lcd.setCursor(16,2);
      lcd.print("%");

      lcd.setCursor(0,3);
      lcd.print("Puda:");
      lcd.setCursor(10,3);
      lcd.print(dsHum);
      lcd.setCursor(16,3);
      lcd.print("%");
      
      break;
      
    case 5:                                          // nastaveni casu zalevani
      
      break;
      
    case 6:                                          // nastaveni delky zalevani
    
      break;
}

/*******************************************************************/

template < typename T, size_t NumberOfSize > 
size_t MenuItemsSize(T (&) [NumberOfSize])
{ 
  return NumberOfSize; 
}
int pocetPolozek = MenuItemsSize(MenuPolozky) - 1;                       
int aktPolozka = 0;                                                  
int prevPolozka = 1;                                 
byte button_flag = 0;
unsigned long previousMillis = millis();

/*******************************************************************/

void setup()
{
  pinMode(ledPinGreen, OUTPUT);
  pinMode(ledPinOrange, OUTPUT);

  /************************************/
  pinMode(upButtonPin, INPUT_PULLUP);
  pinMode(downButtonPin, INPUT_PULLUP);
  pinMode(rightButtonPin, INPUT_PULLUP);
  pinMode(leftButtonPin, INPUT_PULLUP);
  
  lcd.init();
  lcd.backlight();
  lcd.clear();
  dht.begin();
  
}

void loop() 
{
   dhtHum = dht.readHumidity();   
   dhtTemp = dht.readTemperature();
    
  if(digitalRead(rightButtonPin) == LOW && button_flag == 0)
  {
    menuFunctions(aktPolozka + 1, 1, 0);
    button_flag = 1;
    previousMillis = millis();

  }
  if(digitalRead(leftButtonPin) == LOW && button_flag == 0)
  {
    menuFunctions(aktPolozka + 1, 0, 1);
    button_flag = 1;
    previousMillis = millis();

  }
  if(digitalRead(upButtonPin) == LOW && button_flag == 0)
  {
    ++aktPolozka;
    if(aktPolozka > pocetPolozek )
    {
      aktPolozka = pocetPolozek ;
    }
    button_flag = 1;
    previousMillis = millis();

  }
  else if(digitalRead(downButtonPin) == LOW && button_flag == 0)
  {
    aktPolozka--;
    if(aktPolozka < 0)
    {
      aktPolozka = 0;
    }
    button_flag = 1;
    previousMillis = millis();
    
  }
  if(aktPolozka != prevPolozka)
  {
    lcd.clear();
    lcd.setCursor(0, 0);
    lcd.print(MenuPolozky [aktPolozka]);
    menuFunctions(aktPolozka + 1, 0, 0);
    prevPolozka = aktPolozka;
  }
  
  if(millis() - previousMillis >= 400) 
  {
    dhtTemp = dht.readTemperature();
    dhtHum = dht.readHumidity();
    previousMillis = millis();
    button_flag = 0;
  }
}
